
from unicorn import *
from unicorn.x86_const import *
from capstone import *
from pwn import p64, u32
import zlib
import string

code = b'\x48\x89\x5c\x24\x10\x48\x89\x74\x24\x18\x48\x89\x7c\x24\x20\x41\x56\x48\x81\xec\x00\x01\x00\x00\x45\x33\xdb\x48\x8d\x14\x24\x45\x8b\xd3\x41\x8b\xc3\x49\x8b\xd9\x4d\x8b\xf0\x48\x8b\xf1\x66\x90\x88\x02\x48\x8d\x52\x01\xff\xc0\x3d\x00\x01\x00\x00\x7c\xf1\x45\x8b\xc3\x4c\x8d\x0c\x24\x66\x66\x0f\x1f\x84\x00\x00\x00\x00\x00\x41\x0f\xb6\x39\xb8\x89\x88\x88\x88\x41\xf7\xe0\x41\x8b\xc8\xc1\xea\x03\x6b\xc2\x0f\x2b\xc8\x48\x63\xc1\x0f\xbe\x0c\x30\x44\x03\xd1\x44\x03\xd7\x41\x81\xe2\xff\x00\x00\x80\x7d\x0d\x41\xff\xca\x41\x81\xca\x00\xff\xff\xff\x41\xff\xc2\x49\x63\xc2\x48\x8d\x0c\x24\x48\x03\xc8\x41\xff\xc0\x0f\xb6\x01\x41\x88\x01\x49\xff\xc1\x40\x88\x39\x41\x81\xf8\x00\x01\x00\x00\x7c\xa4\x45\x8b\xc3\x4c\x8d\x0c\x24\x0f\x1f\x40\x00\x66\x0f\x1f\x84\x00\x00\x00\x00\x00\x41\x0f\xb6\x39\xb8\x89\x88\x88\x88\x41\xf7\xe0\x41\x8b\xc8\xc1\xea\x03\x6b\xc2\x0f\x2b\xc8\x48\x63\xc1\x0f\xbe\x0c\x30\x44\x03\xd1\x44\x03\xd7\x41\x81\xe2\xff\x00\x00\x80\x7d\x0d\x41\xff\xca\x41\x81\xca\x00\xff\xff\xff\x41\xff\xc2\x49\x63\xc2\x48\x8d\x0c\x24\x48\x03\xc8\x41\xff\xc0\x0f\xb6\x01\x41\x88\x01\x49\xff\xc1\x40\x88\x39\x41\x81\xf8\x00\x01\x00\x00\x7c\xa4\x48\x8b\xb4\x24\x30\x01\x00\x00\x41\x8b\xd3\x45\x8b\xc3\x48\x85\xf6\x0f\x84\xf6\x00\x00\x00\x48\x89\xac\x24\x10\x01\x00\x00\x48\x8b\xfb\x48\x8b\xee\x4c\x2b\xf3\xff\xc2\x81\xe2\xff\x00\x00\x80\x7d\x0a\xff\xca\x81\xca\x00\xff\xff\xff\xff\xc2\x48\x63\xc2\x4c\x8d\x0c\x24\x4c\x03\xc8\x45\x0f\xb6\x11\x45\x03\xc2\x41\x81\xe0\xff\x00\x00\x80\x7d\x0d\x41\xff\xc8\x41\x81\xc8\x00\xff\xff\xff\x41\xff\xc0\x49\x63\xc0\x48\x8d\x0c\x24\x48\x03\xc8\x0f\xb6\x01\x41\x88\x01\x44\x88\x11\x41\x0f\xb6\x01\x49\x03\xc2\x0f\xb6\xc0\x0f\xb6\x0c\x04\x41\x32\x0c\x3e\x88\x0f\x48\xff\xc7\x48\x83\xed\x01\x75\x95\x48\x8b\xac\x24\x10\x01\x00\x00\x41\x8b\xd3\x66\x0f\x1f\x44\x00\x00\x41\xff\xc3\x41\x81\xe3\xff\x00\x00\x80\x7d\x0d\x41\xff\xcb\x41\x81\xcb\x00\xff\xff\xff\x41\xff\xc3\x49\x63\xc3\x4c\x8d\x0c\x24\x4c\x03\xc8\x45\x0f\xb6\x01\x41\x03\xd0\x81\xe2\xff\x00\x00\x80\x7d\x0a\xff\xca\x81\xca\x00\xff\xff\xff\xff\xc2\x48\x63\xc2\x48\x8d\x0c\x24\x48\x03\xc8\x0f\xb6\x01\x41\x88\x01\x44\x88\x01\x41\x0f\xb6\x01\x4c\x03\xc0\x41\x0f\xb6\xc0\x0f\xb6\x0c\x04\x30\x0b\x48\xff\xc3\x48\x83\xee\x01\x75\x97\x4c\x8d\x9c\x24\x00\x01\x00\x00\x33\xc0\x49\x8b\x5b\x18\x49\x8b\x73\x20\x49\x8b\x7b\x28\x49\x8b\xe3\x41\x5e\xc3'

def disas_single(code, addr):
    md = Cs(CS_ARCH_X86, CS_MODE_64)
    for i in md.disasm(code, addr):
        return (i.address, i.mnemonic, i.op_str)

def hook_code(mu, addr, size, user_data):
    mem = mu.mem_read(addr, size)
    dis = disas_single(mem, addr)
    addr, mnemonic, op_str = dis
    print("        >>  0x%x\t%s\t%s"%(addr, mnemonic, op_str))
    if mnemonic == "ret":
        mu.emu_stop()


def get_data(c):
    data = bytearray(open("dump.bin", "rb").read())
    for x in range(len(data)):
        data[x] = (data[x] - c) & 0xff
    return bytes(data)

def decrypt(data):
    mu = Uc(UC_ARCH_X86, UC_MODE_64)

    MEM_TEXT =  0x100000
    MEM_STACK = 0x700000
    MEM_HEAP  = 0xa00000

    addr_key =  MEM_HEAP
    addr_file = MEM_HEAP+0x100

    mu.mem_map(MEM_TEXT, 0x1000)
    mu.mem_map(MEM_STACK, 0x100000)
    mu.mem_map(MEM_HEAP, 0x100000)

    mu.mem_write(MEM_TEXT, code)
    mu.mem_write(addr_key, b'REVERSEENGINEER')
    mu.mem_write(addr_file, data)

    rsp = MEM_STACK + 0x1000
    rbp = MEM_STACK + 0x2000

    mu.reg_write(UC_X86_REG_RSP, rsp)
    mu.reg_write(UC_X86_REG_RBP, rbp)

    # args
    mu.reg_write(UC_X86_REG_RCX, addr_key)
    mu.reg_write(UC_X86_REG_RDX, 0x6f)
    mu.reg_write(UC_X86_REG_R8, addr_file)
    mu.reg_write(UC_X86_REG_R9, addr_file)
    mu.mem_write(rsp + 0x28, p64(0x2a837))

    #mu.hook_add(UC_HOOK_CODE, hook_code)

    mu.emu_start(MEM_TEXT, MEM_TEXT+len(code) - 1)
    
    dec = mu.mem_read(addr_file, 0x2a837)
    return dec


expected_crc = u32(bytes.fromhex("88 A8 A7 92"))
for c in string.printable:
    dec = decrypt(get_data(ord(c)))
    crc = zlib.crc32(dec)
    if crc == expected_crc:
        print("found: %s"%c)
        break
